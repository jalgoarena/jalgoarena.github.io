<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JAlgoArena on JAlgoArena Home</title>
    <link>https://jalgoarena.github.io/</link>
    <description>Recent content in JAlgoArena on JAlgoArena Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Aug 2018 12:48:16 +0200</lastBuildDate>
    
	<atom:link href="https://jalgoarena.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started</title>
      <link>https://jalgoarena.github.io/docs/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jalgoarena.github.io/docs/getting-started/</guid>
      <description>Welcome After you open JAlgoArena Web UI - you will see below page. You will have access to menu moving you to other screens.
 Note: the right up corner green bulb indicates that you are connected with WebSocket service. This service will bring you live updates to rankings and submissions.
 Problems Problems screen give you access to full list of problems. There is few things which are worth to know:</description>
    </item>
    
    <item>
      <title>Redesign Submissions (Part 3)</title>
      <link>https://jalgoarena.github.io/blog/redesign-submissions-3/</link>
      <pubDate>Fri, 31 Aug 2018 12:48:16 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/blog/redesign-submissions-3/</guid>
      <description>Note on previous part This is continuation of Redesign Submissions (Part 2) post, where you can find discussion on new design proposal on processing submissions. This post is iteration on described there approach, which brings few improvements.
Small business feature change, significant architecture meaning There was one cool (my subjective opinion &amp;hellip;) feature, which I was really happy about which was introduced already some time ago. The feature was about adding bonus point to fastest solution for a given problem.</description>
    </item>
    
    <item>
      <title>Redesign Submissions (Part 2)</title>
      <link>https://jalgoarena.github.io/blog/redesign-submissions-2/</link>
      <pubDate>Thu, 30 Aug 2018 08:46:21 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/blog/redesign-submissions-2/</guid>
      <description>Note on previous part This is continuation of Redesign Submissions (Part 1) post, where you can find discussion on new design proposal on processing submissions. This post is iteration on described there approach, which brings few improvements
Problems microservice interaction Thinking about the nature of data we deal with within JAlgoArena - if we consider submissions this set is changing very frequently, with any submission of user, producing large data set.</description>
    </item>
    
    <item>
      <title>Redesign Submissions (Part 1)</title>
      <link>https://jalgoarena.github.io/blog/redesign-submissions/</link>
      <pubDate>Tue, 28 Aug 2018 09:07:09 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/blog/redesign-submissions/</guid>
      <description>Submissions flow Submissions flow within JAlgoArena was already re-designed few times, mostly I was focusing on improvements around chosen technology.
The major upgrade happen when submission flow has changed from synchronous highly coupled design to asynchronous based on apache kafka with decoupled components.
Now I would like to stop and rethink all of that, in technology agnostic way. The approach I want to choose is strictly based on requirements, then modeling messages - the only way to communicate in a new submissions world.</description>
    </item>
    
    <item>
      <title>Microservices</title>
      <link>https://jalgoarena.github.io/blog/microservices/</link>
      <pubDate>Mon, 27 Aug 2018 10:02:19 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/blog/microservices/</guid>
      <description>Microservices done right Nowadays every one is speaking about microservices and you can get an impression they are everywhere. There is obviously a reason for that, as they solve significant problem we face with monolithic applications - dealing with complexity and possibility to scale our software to meet the ever growing needs.
Now, you need to realise that microservice definitions are not equal - I do not think there is already community approved single definition of microservice - and yet there is still many misleading or just wrong ones around.</description>
    </item>
    
    <item>
      <title>Road to Cockroach DB</title>
      <link>https://jalgoarena.github.io/blog/road-to-cockroachdb/</link>
      <pubDate>Tue, 07 Aug 2018 06:26:36 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/blog/road-to-cockroachdb/</guid>
      <description>Intro To fully understand all words used across article - please refer to domain page.
Databases in microservices world Databases &amp;hellip; yes databases. In new microservice architecture world so much impact is put on serverless or function style components, where stateless code wins. And obviously that&amp;rsquo;s a great idea, when you have no state you have no need to synchronize nor to lock. Scaling is the matter of replication and understanding of flow is obvious in a immutable world.</description>
    </item>
    
    <item>
      <title>Continuous Delivery</title>
      <link>https://jalgoarena.github.io/blog/continuous-delivery/</link>
      <pubDate>Wed, 25 Jul 2018 07:42:36 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/blog/continuous-delivery/</guid>
      <description>Key factor to JAlgoArena development – ubiquitous automation Nowadays we software engineers are in common agreement - automation is key to success an DevOps movement just proves that. The goal of developing JAlgoArena from the very beginning was to make as much of automated deployment as possible - and in this post I want to explain how does it look like.
Deployment flow  Initially, developer push his changes to GitHub In next stage, GitHub notifies Travis CI about changes Travis CI runs whole continuous integration flow, running compilation, tests and generating reports  coverage report is sent to Codecov using Gradle script builds and publishes new docker image for new tags (releases) zip package is saved to GitHub releases for new tags (releases)  Nomad jobs takes artifact and deploy/scale automatically JAlgoArena components  docker images for docker based environment zip packages for non-docker based environment   Continuous Delivery diagram Possible improvements For now there is still couple of manual steps, some of them are such by design, others where yet not replaced:</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://jalgoarena.github.io/docs/architecture/</link>
      <pubDate>Wed, 25 Jul 2018 07:31:44 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/docs/architecture/</guid>
      <description>Intro JAlgoArena conducts many parts, which can be divided to:
 Node.JS hosted Web UI Traefik as Edge Service Nomad as scheduler Consul for Service Discovery Apache Kafka used for messaging internally in the backend Elastic Stack for capturing distributed logs Cockroach DB for highly available data storage JAlgoArena microservices delivering core features  Diagram  Publish submission to Kafka. Save new submission (JAlgoArena-Submissions) &amp;amp; start judge process (JAlgoArena-Judge)  Request submissions refresh via WebSocket subscriptions (JAlgoArena-Submissions)  Publish submission result Store submission and ranking result (the second only if submission is accepted) Request ranking &amp;amp; submissions refresh via WebSocket subscriptions  Components JAlgoArena microservices:</description>
    </item>
    
    <item>
      <title>Calculating Points</title>
      <link>https://jalgoarena.github.io/docs/calculating-points/</link>
      <pubDate>Tue, 24 Jul 2018 19:22:55 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/docs/calculating-points/</guid>
      <description>Problem Difficulty Firstly, base amount of points depends on problem difficulty:
 Difficulty Base Points   Easy 10 points   Medium 30 points   Hard 50 points   Time Penalty Secondly, amount of points which depends on time penalty:
 Elapsed Time / Time Limit Points Factor   &amp;gt;= 500 1.0   &amp;gt;= 100 3.0   &amp;gt;= 10 5.0   &amp;gt;= 1 8.</description>
    </item>
    
    <item>
      <title>Welcome to JAlgoArena</title>
      <link>https://jalgoarena.github.io/blog/welcome/</link>
      <pubDate>Fri, 20 Jul 2018 21:27:50 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/blog/welcome/</guid>
      <description>Welcome to JAlgoArena – an open source algorithmic contest platform Hi there and welcome to JAlgoArena - this is first post just to mark the start point! There is lots of interesting technical considerations which are part of building such platform - especially if you have cloud native, high availability topics as the priorities for developing such platform!
So far it was used successfully in few companies to run globally spread on-premises hosted company wide algorithmic contest - and you know what?</description>
    </item>
    
    <item>
      <title>Data Flow</title>
      <link>https://jalgoarena.github.io/docs/data-flow/</link>
      <pubDate>Sun, 26 Aug 2018 12:52:51 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/docs/data-flow/</guid>
      <description>Intro In JAlgoArena we distinct two areas of data flow, one about creating user accounts, and then using that information for accessing platform, authorizing users or just to enhance rankings.
Second, the core one is about processing user submissions, judging them and then storing results. Again, those results together with user account data are used in ranking generation.
Action types There is few different type of activities which defines underlying technology and approach, below all used are listed and explained.</description>
    </item>
    
    <item>
      <title>Deployment</title>
      <link>https://jalgoarena.github.io/docs/deployment/</link>
      <pubDate>Thu, 02 Aug 2018 12:08:06 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/docs/deployment/</guid>
      <description>Consul &amp; Nomad The basis of JAlgoArena infrastructure are Nomad and Consul.
On all machines where you plan to deploy JAlgoArena you should setup cluster of Nomad and Consul
Local run: * Clone JAlgoArena-Nomad locally git clone https://github.com/jalgoarena/JAlgoArena-Nomad.git * install Consul and Nomad, put them on path, then use nomad_consul_server.sh to run locally on your laptop - it&amp;rsquo;s not recommended for production use case
Production run: * Install Consul Cluster - check firstly above command to use KV insert of config which you can modify, and nomad-client.</description>
    </item>
    
    <item>
      <title>Domain</title>
      <link>https://jalgoarena.github.io/docs/domain/</link>
      <pubDate>Thu, 02 Aug 2018 07:31:06 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/docs/domain/</guid>
      <description>Intro You will be able to see here all meaningful words appearing commonly in JAlgoArena domain. By domain we understand vocabulary used to describe business logic.
In case anything important is missing in here, please create a new issue.
Domain  Term Description   Submission The basic domain entity within JAlgoArena. It holds all necessery information for every user problem solution together with results after judgement. The possible states of your submission are:  WAITING - just after submitting but before judgement ACCEPTED - once your submission is accepted COMPILE_ERROR - your submission source code is not compiling RUNTIME_ERROR - there was runtime exception during tests of your submission TIME_LIMIT_EXCEEDED - time limit was exceeded during tests of your submission MEMORY_LIMIT_EXCEEDED - time memory was exceeded during tests of your submission  You can check all your submissions from main screen, clicking on Submissions menu item.</description>
    </item>
    
    <item>
      <title>Technology</title>
      <link>https://jalgoarena.github.io/docs/technology/</link>
      <pubDate>Thu, 02 Aug 2018 07:35:06 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/docs/technology/</guid>
      <description>Intro You will be able to see here all meaningful parts of JAlgoArena architecture which are not JAlgoArena microservices.
In case anything important is missing in here, please create a new issue.
Technology  Term Description   Traefik  API Edge service which exposes REST and WebSocket API doing necessary path rewrites and load balancing.
See more details on Traefik page.
   Apache Kafka  Stream processing component which controls flow for serving submissions.</description>
    </item>
    
    <item>
      <title>Jacek Spólnik</title>
      <link>https://jalgoarena.github.io/company/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jalgoarena.github.io/company/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>