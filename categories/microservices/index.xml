<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Microservices on JAlgoArena Home</title>
    <link>https://jalgoarena.github.io/categories/microservices/</link>
    <description>Recent content in Microservices on JAlgoArena Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Sep 2018 07:37:21 +0200</lastBuildDate>
    
	<atom:link href="https://jalgoarena.github.io/categories/microservices/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redesign Submissions (Part 4)</title>
      <link>https://jalgoarena.github.io/blog/redesign-submissions-4/</link>
      <pubDate>Sat, 01 Sep 2018 07:37:21 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/blog/redesign-submissions-4/</guid>
      <description>Note on previous part This is continuation of Redesign Submissions (Part 3) post, where you can find discussion on new design proposal on processing submissions. This post is iteration on described there approach, which brings few improvements.
Addressing open items In the previous post we have mentioned few problems, which are tackled within this iteration.
Results Store Firstly, there is new store - Results Store. Initially it was separated, and them moved again to single Submissions Store as it required checking state when displaying submissions to users.</description>
    </item>
    
    <item>
      <title>Redesign Submissions (Part 3)</title>
      <link>https://jalgoarena.github.io/blog/redesign-submissions-3/</link>
      <pubDate>Fri, 31 Aug 2018 12:48:16 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/blog/redesign-submissions-3/</guid>
      <description>Note on previous part This is continuation of Redesign Submissions (Part 2) post, where you can find discussion on new design proposal on processing submissions. This post is iteration on described there approach, which brings few improvements.
Small business feature change, significant architecture meaning There was one cool (my subjective opinion &amp;hellip;) feature, which I was really happy about which was introduced already some time ago. The feature was about adding bonus point to fastest solution for a given problem.</description>
    </item>
    
    <item>
      <title>Redesign Submissions (Part 2)</title>
      <link>https://jalgoarena.github.io/blog/redesign-submissions-2/</link>
      <pubDate>Thu, 30 Aug 2018 08:46:21 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/blog/redesign-submissions-2/</guid>
      <description>Note on previous part This is continuation of Redesign Submissions (Part 1) post, where you can find discussion on new design proposal on processing submissions. This post is iteration on described there approach, which brings few improvements
Problems microservice interaction Thinking about the nature of data we deal with within JAlgoArena - if we consider submissions this set is changing very frequently, with any submission of user, producing large data set.</description>
    </item>
    
    <item>
      <title>Redesign Submissions (Part 1)</title>
      <link>https://jalgoarena.github.io/blog/redesign-submissions/</link>
      <pubDate>Tue, 28 Aug 2018 09:07:09 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/blog/redesign-submissions/</guid>
      <description>Submissions flow Submissions flow within JAlgoArena was already re-designed few times, mostly I was focusing on improvements around chosen technology.
The major upgrade happen when submission flow has changed from synchronous highly coupled design to asynchronous based on apache kafka with decoupled components.
Now I would like to stop and rethink all of that, in technology agnostic way. The approach I want to choose is strictly based on requirements, then modeling messages - the only way to communicate in a new submissions world.</description>
    </item>
    
  </channel>
</rss>