<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on JAlgoArena Home</title>
    <link>https://jalgoarena.github.io/docs/</link>
    <description>Recent content in Docs on JAlgoArena Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Jul 2018 07:31:44 +0200</lastBuildDate>
    
	<atom:link href="https://jalgoarena.github.io/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Quick Start</title>
      <link>https://jalgoarena.github.io/docs/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jalgoarena.github.io/docs/quick-start/</guid>
      <description>Deploy with Docker &amp; Nomad To deploy JAlgoArena - you will need to spin up Nomad and Consul clusters plus install Docker Engine.
 Make sure Docker is available on your machines Install Consul and Nomad clusters  use step0.sh to run locally on your laptop - it&amp;rsquo;s not recommended for production use case Install Consul Cluster Install Nomad Cluster  Once you have Nomad and Consul up and running, you may start running JAlgoArena external services:  Clone JAlgoArena-Nomad locally git clone https://github.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://jalgoarena.github.io/docs/architecture/</link>
      <pubDate>Wed, 25 Jul 2018 07:31:44 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/docs/architecture/</guid>
      <description>Intro JAlgoArena conducts many parts, which can be divided to:
 Node.JS hosted Web UI Traefik as Edge Service Nomad as scheduler Consul for Service Discovery Apache Kafka used for messaging internally in the backend Elastic Stack for capturing distributed logs Cockroach DB for highly available data storage JAlgoArena microservices delivering core features  Diagram Components JAlgoArena microservices:
 JAlgoArena UI - host UI components, runs reverse proxy using Service Discovery for resolving edge service JAlgoArena Auth Server - microservice responsible for authentication and storing users data JAlgoArena Queue - microservice serving queue for incoming submissions, publishing them to Apache Kafka JAlgoArena Submissions - microservice storing all submissions and serving data based on collected data JAlgoArena Judge - main microservice responsible for judging incoming submissions JAlgoArena Ranking - microservice focused on building ranking from successful submissions (ranking storage) JAlgoArena Events - microservice responsible for publishing events about submissions or ranking refreshes  </description>
    </item>
    
    <item>
      <title>Calculating Points</title>
      <link>https://jalgoarena.github.io/docs/calculating-points/</link>
      <pubDate>Tue, 24 Jul 2018 19:22:55 +0200</pubDate>
      
      <guid>https://jalgoarena.github.io/docs/calculating-points/</guid>
      <description>Problem Difficulty Firstly, base amount of points depends on problem difficulty:
 Difficulty Base Points   Easy 10 points   Medium 30 points   Hard 50 points   Time Penalty Secondly, amount of points which depends on time penalty:
 Elapsed Time / Time Limit Points Factor   &amp;gt;= 500 1.0   &amp;gt;= 100 3.0   &amp;gt;= 10 5.0   &amp;gt;= 1 8.</description>
    </item>
    
  </channel>
</rss>